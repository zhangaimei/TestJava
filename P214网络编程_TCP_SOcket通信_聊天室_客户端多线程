package cn.bjsxt.net.chat.demo02;

import java.io.Closeable;
import java.io.IOException;

/**
 * 关闭流的方法
 * @author zam
 *
 */
public class CloseUtil {
	public static void closeAll(Closeable...io) {
		for(Closeable temp:io) {
			if(null !=temp) {
				try {
					temp.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
	}
}



package cn.bjsxt.net.chat.demo02;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;

public class Send  implements Runnable{
	//控制台输入流
	private BufferedReader console;
	//管道输出流
	private DataOutputStream dos;
	//控制线程
	private boolean isRunning = true;
	public Send() {
		console = new BufferedReader(new InputStreamReader(System.in));
	}
	public Send(Socket client) {
		this();
		try {
			dos = new DataOutputStream(client.getOutputStream());
		} catch (IOException e) {
			isRunning = false;
			CloseUtil.closeAll(dos,console);
		}
	}
	//1、从控制台接收数据
	private String getMsgFromConsole() {
		try {
			return console.readLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
	/**
	 * 1、从控制台接收数据
	 * 2、发送数据
	 */
	public void send() {
		String msg = getMsgFromConsole();
		if(null!=msg&& !msg.equals("")) {
			try {
				dos.writeUTF(msg);
				dos.flush();	//强制刷新
			} catch (IOException e) {
				// e.printStackTrace();
				isRunning = false;
				CloseUtil.closeAll(dos,console);
			}
		}
	}

	@Override
	public void run() {
		//线程体
		while(isRunning) {
			send();
		}
	}
}



package cn.bjsxt.net.chat.demo02;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.Socket;

/**
 * 接收线程
 * @author zam
 *
 */
public class Receive implements Runnable{
	//输入流
	private DataInputStream dis;
	//线程标识
	private boolean isRunning = true;
	public Receive() {
		
	}
	public Receive(Socket client) {
		try {
			dis = new DataInputStream(client.getInputStream());
		} catch (IOException e) {
			// e.printStackTrace();
			isRunning =false;
			CloseUtil.closeAll(dis);
		}
	}
	/**
	 * 接收数据
	 */
	public String receive() {
		String msg ="";
		try {
			msg=dis.readUTF();
		} catch (IOException e) {
			// e.printStackTrace();
			isRunning = false;
			CloseUtil.closeAll(dis);
		}
		return msg;
	}
	
	@Override
	public void run() {
		//线程体
		while(isRunning) {
			System.out.println(receive());
		}
	}
}



package cn.bjsxt.net.chat.demo02;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * 创建服务器
 * 写出数据：输出流
 * 读取数据：输入流
 * @author zam
 *
 */
public class server {
	public static void main(String[] args) throws IOException {
		ServerSocket server = new ServerSocket(9990);
		while(true) {
			Socket client =server.accept();
			//写出数据  
			//输入流
			DataInputStream dis = new DataInputStream (client.getInputStream());
			DataOutputStream dos = new DataOutputStream(client.getOutputStream());String msg = dis.readUTF();
			
			while(true) {
				String msg1 = dis.readUTF();
				System.out.println(msg1);
				//输出流
				dos.writeUTF("服务器——>"+msg1);
				dos.flush();
			}
		}
	}
}



package cn.bjsxt.net.chat.demo02;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;

/**
 * 创建客户端：发送数据+接收数据
 * 写出数据：输出流
 * 读取数据：输入流
 * 
 * 输入流 与输出流在同一个线程内应该独立处理，彼此独立
 * @author zam
 */
public class client {
	
	public static void main(String[] args) throws UnknownHostException, IOException {
		Socket client = new Socket("localhost",9990);
		//控制台输入流
		new Thread(new Send(client)).start();	//一条路径
		new Thread(new Receive(client)).start();	
	}
}



Console:
b
服务器——>b
c
服务器——>c
d
服务器——>d
