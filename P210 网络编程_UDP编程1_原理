package cn.bjsxt.net.udp;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

/**
 * 客户端
 * 1、创建客户端+端口
 * 2、准备数据
 * 3、打包（发送的地点以及端口）
 * 4、发送
 * 5、释放
 * 
 * 思考：89.12  数据+
 * @author zam
 *
 */
public class MyClient {
	public static void main(String[] args) throws IOException {
		//1、创建服务端 +端口
		DatagramSocket client = new DatagramSocket(666);
		//2、准备数据
		String msg ="udp编程";
		byte[] data = msg.getBytes();
		//3、打包（发送的地点  及端口）DatagramPacket(byte[] buf, int length, InetAddress address, int port)
		DatagramPacket packet = new DatagramPacket(data,data.length,new InetSocketAddress("localhost",8888));
		//4、发送
		client.send(packet);
		//5、释放
		client.close();
 	}
}



package cn.bjsxt.net.udp;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

/**
 * 服务端
 * 1、创建服务器+端口
 * 2、准备接收容器
 * 3、封装成包DatagramPacker(byte[] buf, int length)
 * 4、接收数据
 * 5、分析数据
 * 6、释放
 * @author zam
 *
 */
public class MyServer {
	public static void main(String[] args) throws IOException {
		//1、创建服务器+端口
		DatagramSocket server = new DatagramSocket(8888);
		//2、准备接收容器
		byte[] container = new byte[1024];
		//3、封装成包DatagramPacker(byte[] buf, int length)
		DatagramPacket packet = new DatagramPacket(container, container.length);
		//4、接收数据
		server.receive(packet);
		//5、分析数据
		byte[] data = packet.getData();
		int len = packet.getLength();
		System.out.println(new String(data,0,len));
		//6、释放
		server.close();
 	}
}



先运行MyServer 准备接收数据，再运行 MyClient
Console：
udp编程
